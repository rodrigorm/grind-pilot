#!/usr/bin/php
<?php
function parse($inFile) {
  $in = @fopen($inFile === '-' ? 'php://stdin' : $inFile, 'rb');
  if (!$in) {
    throw new Exception('Could not open '.$inFile.' for reading.');
  }
  // Read information into memory
  while ($line = fgets($in)) {
    if (substr($line, 0, 3) === 'fl=') {
      // Found invocation of function. Read functionname
      list($function) = fscanf($in, "fn=%[^\n\r]s");
      $filename = substr(trim($line), 3);
      // Special case for ENTRY_POINT - it contains summary header
      if ('{main}' === $function) {
        fgets($in);
        $headers[] = fgets($in);
        fgets($in);
      }
      // Cost line
      list($line_no, $time) = fscanf($in, "%d %d");
      handle_def($function, $filename, $line_no, $time);
    } elseif (substr($line, 0, 4) === 'cfn=') {
      // TODO: cfl= "call file"
      // Found call to function. ($function should contain function call originates from)
      $function = substr(trim($line), 4);
      // Skip call line
      fgets($in);
      // Cost line
      list($line_no, $time) = fscanf($in, "%d %d");
      handle_call($function, $line_no, $time);
    } elseif (strpos($line, ': ') !== false) {
      handle_header($line);
    }
  }
}

$buffer = array();
function pop_from_buffer($function) {
  global $buffer;
  foreach ($buffer as $index => $def) {
    if ($def['function'] === $function) { // 0 => $function
      unset($buffer[$index]);
      $buffer = array_merge(array(), $buffer);
      return $def;
    }
  }
}

function handle_def($function, $filename, $line_no, $time) {
  global $buffer;
  $buffer[] = array(
    'function' => $function,
    'filename' => $filename,
    'line_no' => $line_no,
    'time_self' => $time,
    'time_inclusive' => $time,
    'children' => array());
}

function handle_call($function, $line_no, $time) {
  global $buffer;
  $def = pop_from_buffer($function);
  $current = count($buffer) - 1;
  $def['called_from'] = $buffer[$current]['filename'];
  $buffer[$current]['time_inclusive'] += $def['time_inclusive'];
  $buffer[$current]['children'][] = $def;
}

function handle_header($header) {}

$summary = array();
function summarise($root) {
  global $summary;
  $function = $root['function'];
  if (isset($summary[$function])) {
    $summary[$function]['count']++;
    $summary[$function]['sum'] += $root['time_self'];
  } else {
    $summary[$function]['function'] = $function;
    $summary[$function]['count'] = 1;
    $summary[$function]['sum'] = (float) $root['time_self'];
  }
  foreach ($root['children'] as $child) {
    summarise($child);
  }
}

function finalise_summary() {
  global $summary;
  foreach (array_keys($summary) as $name) {
    $summary[$name]['avg'] = $summary[$name]['sum'] / $summary[$name]['count'];
  }
}

function compare_by_avg($a, $b) {
  if ($a['avg'] == $b['avg']) {
    return 0;
  }
  return ($a['avg'] < $b['avg']) ? -1 : 1;
}

function compare_by_sum($a, $b) {
  if ($a['sum'] == $b['sum']) {
    return 0;
  }
  return ($a['sum'] < $b['sum']) ? -1 : 1;
}

function list_summary($root, $sort_by = 'avg') {
  global $summary;
  summarise($root);
  finalise_summary();
  usort($summary, "compare_by_" . $sort_by);
  $summary = array_reverse($summary, true);
  echo "Sum       Avg.      Calls Function\n";
  foreach (array_slice($summary, 0, 25) as $data) {
    echo str_pad(number_format($data['sum'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT) . " "
      . str_pad(number_format($data['avg'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT) . " "
      . str_pad($data['count'], 5, ' ', STR_PAD_LEFT) . " "
      . $data['function'] . "\n";
  }
}

$show_filename = true;
function format_line($data, $level) {
  global $show_filename;
  $s = str_pad(number_format($data['time_inclusive'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . " " . str_pad(number_format($data['time_self'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . $level
    . " " . $data['function'];
  if ($show_filename) {
    if ($data['called_from']) {
      $s .= "\n" . $level . "                    called from ["
        . $data['called_from'] . ":" . $data['line_no'] . "]";
    } else {
      $s .= "\n";
      //$s .= "   [" . $data['filename'] . ":" . $data['line_no'] . "]";
    }
  }
  return $s;
}

function format_line_short($data, $index, $level) {
  return
    str_pad(number_format($data['time_inclusive'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . " " . str_pad(number_format($data['time_self'] / 1000, 4, ".", ""), 9, ' ', STR_PAD_LEFT)
    . $level
    . str_pad($index . ".", 5, ' ', STR_PAD_LEFT)
    . " " . $data['function'];
}

function traverse_and_print($root, $path) {
  echo "Inclusive Self      Callstack\n";

  $level = "";
  foreach ($path as $index) {
    echo format_line($root, $level), "\n";
    if (!isset($root['children'][$index])) {
      throw new Exception("No such index");
    }
    $root = $root['children'][$index];
    $level .= "  ";
  }

  echo format_line($root, $level), "\n";

  if (isset($root['children'])) {
    echo "\n";
    echo "[", $root['filename'], "]\n";
    foreach ($root['children'] as $index => $child) {
      echo format_line_short($child, $index, $level), "\n";
    }
  }
}
// main:
if (empty($_SERVER['argv'][1])) {
  throw new Exception("Missing filename");
}

if ($_SERVER['argv'][1] === '--help') {
  echo "USAGE: grind-pilot FILENAME [PATH|avg|sum]\n";
  echo "  FILENAME  Name of cachegrind file. Use - for stdin.\n";
  echo "  PATH      Zero or more numbers, separated by spaces.\n";
  echo "  avg       Show index of 25 most expensive files, on average.\n";
  echo "  sum       Show index of 25 most expensive files, in total.\n";
  exit;
}

parse($_SERVER['argv'][1]);
$root = $buffer[0];

if (in_array($_SERVER['argv'][2], array('sum', 'avg'))) {
  list_summary($root, $_SERVER['argv'][2]);
} else {
  $path = $_SERVER['argv'];
  array_shift($path);
  array_shift($path);
  traverse_and_print($root, $path);
}

